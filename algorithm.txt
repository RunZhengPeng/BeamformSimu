Algorithm 1 Scanning Window Selection
Input:
* object info, including position and velocity, i.e., P and V
* Time delay, which is the interval bewteen now and last saved time, i.e., t_d
* The beam size, i.e., b_r

1: Calculate the window radius R = V*t_d/b_r
2: Create a window W surrounding the object with the radius of R
3: Divide the window W into four parts averagely and select appropriate part W_s according to 
   the direction of the moving object, i.e., object runs toward the southwest, then select
   the soutwest part of W.

Output: the scanning window W_s used to predict the next object postion




Algorithm 2 Beam Tracking
Input:
* object info, including position and velocity, i.e., P and V
* Time delay, which is the interval bewteen now and last saved time, i.e., t_d
* The beam size, i.e., b_r

1: Initialize P_n=0, V_n=0;
2: Carry out Algorithm 1 to get scanning window W_s
3: for each w in W_s do
4:   Perform object detection
5:   if found object
6:      Record object position P_n and velocity V_n
7:      break;
8:   end if
9:  end for
Output: object position P_n and velocity V_n





Scheme 1 Smart beam tracking scheme
1: Initialize T_r = null
2: Scanning the whole area with big beam in rapid sequence in T_w second, assuming that each beam
   scanning takes T1 seconds
3: if found Object then
4    Record object position P_i and velocity V_i respectively
5:   Carry out Algorithm 2 with the parameter(P_i,V_i,T_w/2+T1, b_r) in time-sharing order to 
     get next object position P_bi and velocity V_bi(b_r is the big beam size), count tracking time t_r
6:   if big beam tracking found object then
7:      put (P_bi, V_bi) into T_r
8:      Loction precisly with small beam in the big beam which have found object and record object
        position P_bsi and velocity V_nsi
8:      Carry out Algorithm 2 with the parameter(P_bsi,V_bsi,T1, s_r) to perform small beam tracking
        and record the object position P_si and velocity V_si(s_r is the small beam size)
9:      if small beam tracking found object then
10:        put (P_si, V_si) into T_r
11:        if t_r > t_allow then
12:           back to step 2 to restart scanning the whole area to detect whether has other objects appear
13:        else
14:           P_bsi = P_si, V_bsi = V_si;
15:           back to step 8 to keep tracking 
16:        end if
17:     else
18:        back step 5 to restart big beam tracking
19:     end if
20:   else
21:     back to step 2 to restart scanning the whole area
22:   end if
23:else
24:   back to step 2 to keep scanning
25:end if
 